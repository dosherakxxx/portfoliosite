function initTheme() {
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', theme);
    updateThemeIcon(theme);
}

function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    const button = document.getElementById('themeToggle');
    
    button.style.transform = 'scale(0.9)';
    setTimeout(() => button.style.transform = '', 200);
    
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
}

function updateThemeIcon(theme) {
    const button = document.querySelector('#themeToggle');
    button.style.transform = 'scale(0.95)';
    setTimeout(() => button.style.transform = '', 200);
}

function handleScroll() {
    const header = document.querySelector('.main-header');
    const theme = document.documentElement.getAttribute('data-theme');
    if (window.scrollY > 50) {
        header.style.background = theme === 'dark' ? 'rgba(15, 23, 42, 0.98)' : 'rgba(255, 255, 255, 0.98)';
    } else {
        header.style.background = theme === 'dark' ? 'rgba(15, 23, 42, 0.95)' : 'rgba(255, 255, 255, 0.95)';
    }
}

window.addEventListener('scroll', handleScroll);

const translations = {
    en: {
        nav: {
            home: 'Home',
            about: 'About',
            skills: 'Skills',
            portfolio: 'Portfolio',
            contact: 'Contact'
        },
        home: {
            title: 'Web Developer',
            subtitle: 'Creating modern and responsive web solutions'
        },
        about: {
            title: 'About Me',
            description: 'I am a passionate web developer with expertise in creating dynamic and user-friendly websites. With a strong foundation in both front-end and back-end development, I bring ideas to life through clean and efficient code.'
        },
        skills: {
            title: 'My Skills',
            html: 'Modern and responsive layouts',
            js: 'Dynamic web applications',
            python: 'Backend development & automation',
            mysql: 'Database design & management',
            php: 'Server-side development'
        },
        contact: {
            title: 'Contact Me',
            name: 'Name',
            email: 'Email',
            message: 'Message',
            send: 'Send Message'
        }
    },
    ru: {
        nav: {
            home: '–ì–ª–∞–≤–Ω–∞—è',
            about: '–û–±–æ –º–Ω–µ',
            skills: '–ù–∞–≤—ã–∫–∏',
            portfolio: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
            contact: '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
        },
        home: {
            title: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            subtitle: '–°–æ–∑–¥–∞—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ–±-—Ä–µ—à–µ–Ω–∏—è'
        },
        about: {
            title: '–û–±–æ –º–Ω–µ',
            description: '–Ø —É–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö –∏ —É–¥–æ–±–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤. –ò–º–µ—é —Å–∏–ª—å–Ω—É—é –±–∞–∑—É –∫–∞–∫ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, —Ç–∞–∫ –∏ –≤ –±—ç–∫–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤–æ–ø–ª–æ—â–∞—é –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥.'
        },
        skills: {
            title: '–ú–æ–∏ –Ω–∞–≤—ã–∫–∏',
            html: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–∞–∫–µ—Ç—ã',
            js: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            python: '–ë—ç–∫–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            mysql: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î',
            php: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
        },
        contact: {
            title: '–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π',
            name: '–ò–º—è',
            email: '–ü–æ—á—Ç–∞',
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ',
            send: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
        }
    }
};

let currentLang = 'en';

function initLanguageSwitcher() {
    const langButtons = document.querySelectorAll('.lang-button button');
    langButtons.forEach(button => {
        button.addEventListener('click', () => {
            const lang = button.getAttribute('data-lang');
            if (lang) {
                langButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                switchLanguage(lang);
            }
        });
    });
}

function switchLanguage(lang) {
    if (currentLang === lang) return;
    
    currentLang = lang;
    document.documentElement.setAttribute('lang', lang);
    
    document.body.classList.add('language-switching');
    
    setTimeout(() => {
        updateContent(lang);
        localStorage.setItem('preferred-lang', lang);
        
        setTimeout(() => {
            document.body.classList.remove('language-switching');
        }, 300);
    }, 150);
}

document.documentElement.style.setProperty('scroll-padding-top', '80px');

function updateContent(lang) {
    const elements = document.querySelectorAll('[data-translate]');
    elements.forEach(element => {
        const key = element.getAttribute('data-translate').split('.');
        let translation = translations[lang];
        try {
            key.forEach(k => {
                if (translation && k in translation) {
                    translation = translation[k];
                } else {
                    console.warn(`Translation missing for key: ${key.join('.')} in language: ${lang}`);
                    translation = element.textContent;
                }
            });
            if (translation) {
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = translation;
                } else {
                    element.textContent = translation;
                }
            }
        } catch (error) {
            console.warn(`Error translating element:`, error);
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal() {
    const modal = document.getElementById('orderModal');
    document.body.style.overflow = 'hidden';
    modal.classList.add('active');
}

function closeModal() {
    const modal = document.getElementById('orderModal');
    modal.addEventListener('transitionend', function handler(e) {
        if (e.propertyName === 'opacity' && !modal.classList.contains('active')) {
            document.body.style.overflow = '';
            modal.removeEventListener('transitionend', handler);
        }
    });
    modal.classList.remove('active');
}

const TELEGRAM_TOKEN = '7921213339:AAG13NxWY3ds9TBTmrMjf6sq34t5vPTXaqU'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = '7520366041'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID —á–∞—Ç–∞

async function sendToTelegram(formData) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è
    let serviceText = "";
    if (formData.get('service')) {
        const select = document.getElementById('service');
        const option = select.options[select.selectedIndex];
        serviceText = option ? option.text : formData.get('service');
    }

    const text = `üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!

üë§ –ò–º—è: ${formData.get('name')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.get('phone')}
üõ† –£—Å–ª—É–≥–∞: ${serviceText}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.get('message')}`;

    const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
    const params = {
        chat_id: TELEGRAM_CHAT_ID,
        text: text,
        parse_mode: 'HTML'
    };

    try {
        const response = await fetch(url + '?' + new URLSearchParams(params));
        const data = await response.json();
        return data.ok;
    } catch (error) {
        console.error('Error sending to Telegram:', error);
        return false;
    }
}

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
let reviews = [
    {
        company: 'MainBet',
        message: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º!'
    },
    {
        company: 'EuroTherm',
        message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ. –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Å—Ä–æ–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.'
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
function addReview(review) {
    reviews.push(review);
    localStorage.setItem('reviews', JSON.stringify(reviews));
    renderReviews();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
function renderReviews() {
    const reviewsGrid = document.querySelector('.reviews-grid');
    reviewsGrid.innerHTML = reviews.map((review, index) => `
        <div class="review-card">
            <div class="review-header">
                <h3>${review.company}</h3>
                <button class="delete-review" data-index="${index}">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p>${review.message}</p>
        </div>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelectorAll('.delete-review').forEach(button => {
        button.addEventListener('click', () => {
            const index = parseInt(button.getAttribute('data-index'));
            deleteReview(index);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
function deleteReview(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
        reviews.splice(index, 1);
        localStorage.setItem('reviews', JSON.stringify(reviews));
        renderReviews();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function initReviews() {
    const savedReviews = localStorage.getItem('reviews');
    if (savedReviews) {
        reviews = JSON.parse(savedReviews);
    }
    renderReviews();
}

function updateAuthButtons(isLoggedIn) {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    const dashboardBtn = document.getElementById('dashboardBtn');
    
    if (isLoggedIn) {
        loginBtn.style.display = 'none';
        registerBtn.style.display = 'none';
        dashboardBtn.style.display = 'block';
    } else {
        loginBtn.style.display = 'block';
        registerBtn.style.display = 'block';
        dashboardBtn.style.display = 'none';
    }
}

document.addEventListener('DOMContentLoaded', () => {
    initTheme();
    document.getElementById('themeToggle').addEventListener('click', toggleTheme);
    initLanguageSwitcher();
    const savedLang = localStorage.getItem('preferred-lang') || 'en';
    switchLanguage(savedLang);

    const logoLink = document.querySelector('.logo-link');
    logoLink.addEventListener('click', (e) => {
        e.preventDefault();
        window.location.reload();
    });

    initReviews();

    // Add event listeners for all order buttons
    document.querySelectorAll('.btn-primary').forEach(button => {
        if (button.textContent.trim() === '–ó–∞–∫–∞–∑–∞—Ç—å') {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const card = button.closest('.pricing-card');
                if (card) {
                    const serviceType = card.querySelector('.pricing-header h3').textContent;
                    const serviceSelect = document.getElementById('service');
                    
                    // Set the service in the modal
                    Array.from(serviceSelect.options).forEach(option => {
                        if (option.text === serviceType) {
                            serviceSelect.value = option.value;
                        }
                    });
                }
                openModal();
            });
        }
    });

    // Close modal when clicking outside
    document.getElementById('orderModal').addEventListener('click', (e) => {
        if (e.target === e.currentTarget) {
            closeModal();
        }
    });

    // Close modal when clicking the close button
    document.querySelector('.close-modal').addEventListener('click', closeModal);

    // Close modal on Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && document.getElementById('orderModal').classList.contains('active')) {
            closeModal();
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    document.getElementById('orderForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            const success = await sendToTelegram(formData);
            
            if (success) {
                alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                closeModal();
                e.target.reset();
            } else {
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    document.getElementById('contactForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
            const success = await sendToTelegram(formData);
            
            if (success) {
                alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
                e.target.reset();
            } else {
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤
    document.getElementById('reviewForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        const newReview = {
            company: formData.get('company'),
            message: formData.get('message')
        };

        const text = `üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${newReview.company}
üí¨ –û—Ç–∑—ã–≤: ${newReview.message}`;

        try {
            const success = await sendToTelegram({ get: key => formData.get(key), message: text });
            
            if (success) {
                addReview(newReview); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!');
                e.target.reset();
            } else {
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // Mobile menu functionality
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const mobileMenuClose = document.querySelector('.mobile-menu-close');
    const mobileMenu = document.querySelector('.mobile-menu');
    const mobileLinks = document.querySelectorAll('.mobile-nav-links a');

    function toggleMobileMenu() {
        mobileMenu.classList.toggle('active');
        mobileMenuToggle.classList.toggle('active');
        document.body.classList.toggle('menu-open');
    }

    mobileMenuToggle.addEventListener('click', toggleMobileMenu);
    mobileMenuClose.addEventListener('click', toggleMobileMenu);

    // Close mobile menu when clicking on links
    mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
            toggleMobileMenu();
            // Smooth scroll to section
            const target = document.querySelector(link.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });

    // Sync theme toggle between desktop and mobile
    const mobileThemeToggle = document.getElementById('mobileThemeToggle');
    if (mobileThemeToggle) {
        mobileThemeToggle.addEventListener('click', toggleTheme);
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let touchStartY = 0;
    let touchEndY = 0;

    document.addEventListener('touchstart', e => {
        touchStartY = e.changedTouches[0].screenY;
    }, { passive: true });

    document.addEventListener('touchend', e => {
        touchEndY = e.changedTouches[0].screenY;
        const diffY = touchStartY - touchEndY;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–≤–µ—Ä—Ö
        if (diffY > 50 && mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    }, { passive: true });

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    let isScrolling;
    window.addEventListener('scroll', () => {
        window.clearTimeout(isScrolling);
        isScrolling = setTimeout(() => {
            handleScroll();
        }, 66);
    }, { passive: true });

    // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    observer.unobserve(img);
                }
            });
        });

        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ touch
    if ('ontouchstart' in window) {
        document.body.classList.add('touch-device');
    }

    // Check auth status on page load
    fetch('/php/auth/check_auth.php')
        .then(response => response.json())
        .then(data => {
            updateAuthButtons(data.isLoggedIn);
        })
        .catch(error => console.error('Auth check error:', error));

    // Keep only smooth scroll for navigation
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            document.querySelector(this.getAttribute('href')).scrollIntoView({
                behavior: 'smooth'
            });
        });
    });

    // Cart toggle functionality
    const cartToggle = document.getElementById('cartToggle');
    const cartSidebar = document.getElementById('cartSidebar');
    const closeCart = document.getElementById('closeCart');

    cartToggle.addEventListener('click', () => {
        cartSidebar.classList.add('active');
        document.body.style.overflow = 'hidden';
    });

    closeCart.addEventListener('click', () => {
        cartSidebar.classList.remove('active');
        document.body.style.overflow = '';
    });

    // Close cart on outside click
    document.addEventListener('click', (e) => {
        if (!cartSidebar.contains(e.target) && !cartToggle.contains(e.target)) {
            cartSidebar.classList.remove('active');
            document.body.style.overflow = '';
        }
    });
});

document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

const sections = document.querySelectorAll('section');
const observerOptions = {
    threshold: 0.2
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
        }
    });
}, observerOptions);

sections.forEach(section => {
    section.classList.add('section-hidden');
    observer.observe(section);
});
